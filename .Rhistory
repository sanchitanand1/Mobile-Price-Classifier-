library(dslabs)
install.packages("dslabs")
library(dslabs)
install.packages("ggplot2")
library(dslabs)
library("dslabs")
install.packages("dslabs")
library(dslabs)
murders
ggplot<-(murders,aes(population/10^6,total,labl=abb))+geom_point(aes(col=region))+scale_x_log10()+scale_y_log10()+geom_text(nudge_x=0.075,size=4)+labs(title="SCATTERPLOT",x="POPULATION",y="TOTAL")
ggplot<-(murders aes(population/10^6,total,labl=abb))+geom_point(aes(col=region))+scale_x_log10()+scale_y_log10()+geom_text(nudge_x=0.075,size=4)+labs(title="SCATTERPLOT",x="POPULATION",y="TOTAL")
ggplot<-(murders,aes(population/10^6,total,labl=abb))+geom_point(aes(col=region))+scale_x_log10()+scale_y_log10()+geom_text(nudge_x=0.075,size=4)+labs(title="SCATTERPLOT",x="POPULATION",y="TOTAL")
q<-ggplot(murders,aes(population/10^6,total,col=region,label=abb))+geom_point(aes(col=region))+scale_x_log10()+scale_y_log10()+geom_text(nudge_x = 0.075,size=4)+labs(title="SCATTERPLOT",x="POPULATION",y="TOTAL")
library(ggplot2)
q<-ggplot(murders,aes(population/10^6,total,col=region,label=abb))+geom_point(aes(col=region))+scale_x_log10()+scale_y_log10()+geom_text(nudge_x = 0.075,size=4)+labs(title="SCATTERPLOT",x="POPULATION",y="TOTAL")
library(dslabs)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(ggcorrplot)
df <- read.csv("train.csv")
head(df)
summary(df)
#chceking the corelation
corr <- round(cor(df), 8)
setwd("C:/Users/Sanchit/Desktop/2nd year/sem2/data science/cp")
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(ggcorrplot)
df <- read.csv("train.csv")
head(df)
summary(df)
#chceking the corelation
corr <- round(cor(df), 8)
print(ggcorrplot(corr))
df$blue <- as.factor(df$blue)
df$dual_sim <- as.factor(df$dual_sim)
df$four_g <- as.factor(df$four_g)
df$three_g<- as.factor(df$three_g)
df$touch_screen <- as.factor(df$touch_screen)
df$wifi <- as.factor(df$wifi)
df$price_range <- as.factor(df$price_range)
# Bar Chart Subplots
p1 <-  ggplot(df, aes(x=blue, fill=blue)) + theme_bw() + geom_bar() + ylim(0, 1050) + labs(title = "Bluetooth") + scale_x_discrete(labels = c('Not Supported','Supported'))
p2 <- ggplot(df, aes(x=dual_sim, fill=dual_sim)) + theme_bw() + geom_bar() + ylim(0, 1050) + labs(title = "Dual Sim") + scale_x_discrete(labels = c('Not Supported','Supported'))
p3 <- ggplot(df, aes(x=four_g, fill=four_g)) + theme_bw() + geom_bar() + ylim(0, 1050) + labs(title = "4 G") + scale_x_discrete(labels = c('Not Supported','Supported'))
print(grid.arrange(p1, p2, p3, nrow = 1))
print(prop.table(table(df$blue))) # cell percentages
print(prop.table(table(df$dual_sim))) # cell percentages
print(prop.table(table(df$four_g))) # cell percentages
# Bar Chart Subplots
p1 <-  ggplot(df, aes(x=price_range, y = battery_power, color=price_range)) + geom_boxplot(outlier.colour="red", outlier.shape=8, outlier.size=4) + labs(title = "Battery Power vs Price Range")
p2 <- ggplot(df, aes(x=price_range, y = mobile_wt, color=price_range)) + geom_boxplot(outlier.colour="red", outlier.shape=8, outlier.size=4) + labs(title = "Phone Weight vs Price Range")
p3 <- ggplot(df, aes(x=price_range, y = ram, color=price_range)) + geom_boxplot(outlier.colour="red", outlier.shape=8, outlier.size=4) + labs(title = "RAM vs Price Range")
print(grid.arrange(p1, p2, p3, nrow = 1))
data = data.frame(MagaPixels = c(df$fc, df$pc), Camera = rep(c("Front Camera", "Primary Camera"), c(length(df$fc), length(df$pc))))
print(ggplot(data, aes(MagaPixels, fill = Camera)) + geom_bar(position = 'identity', alpha = .5))
# Checking for Missing values
missing_values <- df %>% summarize_all(funs(sum(is.na(.))/n()))
missing_values <- gather(missing_values, key="feature", value="missing_pct")
print(missing_values %>% ggplot(aes(x=reorder(feature,-missing_pct),y=missing_pct)) + geom_bar(stat="identity",fill="red")+coord_flip()+theme_bw())
f <- read.csv("train.csv")
#skewness
library(moments)
skewness(f)
hist(df$clock_speed, col='red')
#Importing Libraries And reading The file ----
library(tidyverse)
library(caret)
library(nnet)
library(caTools)
f<-read.csv("train.csv")
head(f)
f$blue <- as.factor(f$blue)
f$dual_sim <- as.factor(f$dual_sim)
f$four_g <- as.factor(f$four_g)
f$three_g<- as.factor(f$three_g)
f$touch_screen <- as.factor(f$touch_screen)
f$wifi <- as.factor(f$wifi)
f$price_range <- as.factor(f$price_range)
#spliting it into train and test data----
set.seed(123)
split<-sample.split(f,SplitRatio=0.8)
tr_data<-subset(f,split==TRUE)
ts_data<-subset(f,split==FALSE)
#Applying Multinomial Logestic Regression----
model <- nnet::multinom(price_range ~., tr_data)
#Summarize the model----
print(summary(model))
#prediction part----
predicted <- model %>% predict(ts_data)
head(predicted)
#final part of Confusion Matrix And Accuracy and all----
accu<-mean(predicted == ts_data$price_range)  #accuracy of the multinomial logistic regression
t1<-table(ts_data$price_range, predicted)
confusionMatrix(t1, mode = "everything", positive="1")
#ROC----
predicted <- as.integer(predicted)
tr_data$price_range<- as.integer(tr_data$price_range)
s1 <- roc(ts_data$price_range, predicted)
s1
r <- ggroc(s1,colour="blue")
print(r)
library(randomForest)
library(caTools)
library(caret)
f<-read.csv("train.csv")
head(f)
f$blue <- as.factor(f$blue)
f$dual_sim <- as.factor(f$dual_sim)
f$four_g <- as.factor(f$four_g)
f$three_g<- as.factor(f$three_g)
f$touch_screen <- as.factor(f$touch_screen)
f$wifi <- as.factor(f$wifi)
f$price_range <- as.factor(f$price_range)
#spliting it into train and test data----
set.seed(123)
split<-sample.split(f,SplitRatio=0.8)
tr_data<-subset(f,split==TRUE)
ts_data<-subset(f,split==FALSE)
#Building Random Forest classifier
rf <- randomForest(price_range ~ .,data=tr_data, importance=TRUE)
importance(rf)
plot(rf)
#Predicting
pred = predict(rf, ts_data)
#pred = as.numeric(pred)
cm = table(ts_data$price_range, pred)
confusionMatrix(cm, mode = "everything", positive = "1")
#ROC
pred <- as.integer(pred)
tr_data$price_range<- as.integer(tr_data$price_range)
s4 <- roc(ts_data$price_range, pred)
s4
#For Adding Two ROC Curves
#For Adding Two ROC Curves
plot(s1,col="red", main="ROC Curve")
plot(s4,col="black",add=TRUE)
legend(0.3,0.65,c("MLR","RF"),lty=1,col=c("red","black"),title="Graph type", cex = 0.6)
